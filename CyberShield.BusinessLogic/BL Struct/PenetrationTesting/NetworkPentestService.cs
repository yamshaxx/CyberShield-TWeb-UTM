using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CyberShield.BusinessLogic.Interface;
using CyberShield.BusinessLogic.Interface.Repositories;
using CyberShield.Domain.Enums;
using CyberShield.Domain.Model.Client;
using CyberShield.Domain.Model.PenetrationTesting;

namespace CyberShield.BusinessLogic.BL_Struct.PenetrationTesting
{
    public class NetworkPentestService : INetworkPentestService
    {
        private readonly IClientRepository _clientRepository;
        private readonly INetworkPentestRepository _networkPentestRepository;

        // Constantele de preț conform detaliilor
        private const decimal BASE_PRICE = 3000m; // Prețul pentru primele 10 IP-uri
        private const decimal ADDITIONAL_IP_PRICE = 1000m; // Prețul pentru fiecare IP suplimentar
        private const int BASE_IP_COUNT = 10; // Numărul de IP-uri incluse în prețul de bază

        public NetworkPentestService(
            IClientRepository clientRepository,
            INetworkPentestRepository networkPentestRepository)
        {
            _clientRepository = clientRepository;
            _networkPentestRepository = networkPentestRepository;
        }

        public async Task<decimal> CalculatePriceAsync(int ipAddressCount)
        {
            if (ipAddressCount <= 0)
                throw new ArgumentException("Numărul de adrese IP trebuie să fie mai mare decât 0.");

            // Aplicăm formula de calcul al prețului
            decimal totalPrice = BASE_PRICE;

            // Adăugăm prețul pentru IP-urile suplimentare
            if (ipAddressCount > BASE_IP_COUNT)
            {
                totalPrice += (ipAddressCount - BASE_IP_COUNT) * ADDITIONAL_IP_PRICE;
            }

            return totalPrice;
        }

        public async Task<int> CreateRequestAsync(ClientDTO client, int ipAddressCount, string notes = null)
        {
            if (client == null)
                throw new ArgumentNullException(nameof(client), "Detaliile clientului sunt obligatorii.");

            if (string.IsNullOrWhiteSpace(client.Email))
                throw new ArgumentException("Adresa de email a clientului este obligatorie.");

            if (string.IsNullOrWhiteSpace(client.FullName))
                throw new ArgumentException("Numele complet al clientului este obligatoriu.");

            if (string.IsNullOrWhiteSpace(client.CompanyName))
                throw new ArgumentException("Numele companiei este obligatoriu.");

            // Verificăm dacă clientul există deja
            var existingClient = await _clientRepository.GetByEmailAsync(client.Email);
            int clientId;

            if (existingClient == null)
            {
                // Creăm un client nou
                clientId = await _clientRepository.CreateAsync(client);
            }
            else
            {
                // Folosim clientul existent
                clientId = existingClient.Id;
            }

            // Calculăm prețul
            decimal totalPrice = await CalculatePriceAsync(ipAddressCount);

            // Creăm cererea de pentest
            var request = new NetworkPentestRequestDTO
            {
                ClientId = clientId,
                IpAddressCount = ipAddressCount,
                TotalPrice = totalPrice,
                RequestDate = DateTime.Now,
                Status = RequestStatus.New.ToString(),
                Notes = notes
            };

            // Salvăm cererea în baza de date
            return await _networkPentestRepository.CreateAsync(request);
        }

        public async Task<NetworkPentestRequestDTO> GetRequestByIdAsync(int id)
        {
            return await _networkPentestRepository.GetByIdAsync(id);
        }

        public async Task<List<NetworkPentestRequestDTO>> GetRequestsByClientIdAsync(int clientId)
        {
            return await _networkPentestRepository.GetByClientIdAsync(clientId);
        }

        public async Task UpdateRequestStatusAsync(int requestId, string status)
        {
            // Verificăm dacă statusul este valid
            if (!Enum.TryParse<RequestStatus>(status, out _))
                throw new ArgumentException("Statusul specificat nu este valid.");

            var request = await _networkPentestRepository.GetByIdAsync(requestId);
            if (request == null)
                throw new ArgumentException("Cererea specificată nu există.");

            request.Status = status;
            await _networkPentestRepository.UpdateAsync(request);
        }
    }
}
